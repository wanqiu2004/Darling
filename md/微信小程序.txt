# 由来
小程序并非凭空冒出来的一个概念。微信早有相关的 JS API 了。
最初是提供给腾讯内部一些业务使用，很多外部开发者发现了之后，依葫芦画瓢地使用了，
2015年初，微信发布了一整套网页开发工具包，称之为 JS-SDK，开放了拍摄、录音、支付、分享等几十个API。
让所有开发者都可以使用到微信的原生能力

​JS-SDK是对之前的 WeixinJSBridge 的一个包装，以及新能力的释放，并且由对内开放转为了对所有开发者开放
受限于设备性能和网络速度，白屏会更加明显。微信 Web 资源离线存储

需要使得所有的开发者都能做到：

- 快速的加载

- 更强大的能力

- 原生的体验

- 易用且安全的微信数据开放

- 高效和简单的开发

这就是小程序的由来。

---

# 区别
- ​小程序的主要开发语言是 JavaScript 

- ​网页开发渲染线程和脚本线程是互斥的，而在小程序中，二者是分开的，分别运行在不同的线程中。

- 逻辑层运行在 JSCore 中，并没有一个完整浏览器对象，因而缺少相关的DOM API和BOM API。jQuery、 Zepto 等，
在小程序中是无法运行的。与 NodeJS 环境也是不尽相同，所以一些 NPM 的包在小程序中也是无法运行的。

- ​网页开发者需要面对的环境是各式各样的浏览器，PC 端需要面对 IE、Chrome、QQ浏览器等，在移动端需要面对Safari、Chrome以及 iOS、Android 系统中的各式 WebView 。
而小程序开发过程中需要面对的是两大操作系统 iOS 和 Android 的微信客户端，以及用于辅助开发的小程序开发者工具，小程序中三大运行环境也是有所区别的，如表1-1所示。

|运行环境|逻辑层|渲染层|
|---|---|---|
|iOS|JavaScriptCore|WKWebView|
|安卓|X5 JSCore|X5浏览器|
|小程序开发者工具|NWJS|Chrome WebView

---

# 代码构成
.json 后缀的 JSON 配置文件
.wxml 后缀的 WXML 模板文件
.wxss 后缀的 WXSS 样式文件
.js 后缀的 JS 脚本逻辑文件

项目的根目录有一个 app.json 和 project.config.json，此外在 pages/logs 目录下还有一个 logs.json


- app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等
- 小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。
- 小程序里边的每个页面都有不一样的色调来区分不同功能模块，page.json，让开发者可以独立定义每个页面的一些属性，例如刚刚说的顶部颜色、是否允许下拉刷新等等

---

# 宿主环境
WXML 模板和 WXSS 样式工作在渲染层，JS 脚本工作在逻辑层。

小程序的渲染层和逻辑层分别由2个线程管理：渲染层的界面使用了WebView 进行渲染；逻辑层采用JsCore线程运行JS脚本。一个小程序存在多个界面，所以渲染层存在多个WebView线程，这两个线程的通信会经由微信客户端做中转
![](https://res.wx.qq.com/wxdoc/dist/assets/img/4-1.ad156d1c.png)

微信客户端在打开小程序之前，会把整个小程序的代码包下载到本地。
紧接着通过 app.json 的 pages 字段就可以知道你当前小程序的所有页面路径:

小程序提供了丰富的基础组件给开发者，使用组件的时候，还可以通过属性传递值给组件，让组件可以以不同的状态去展现

组件的内部行为也会通过事件的形式让开发者可以感知

小程序提供了很多 API 给开发者去使用例如获取用户信息、微信支付等等，多数 API 的回调都是异步，你需要处理好代码逻辑的异步问题。

# ？协同工作

---

# Hello Word例子
在根目录下创建app.json，其内容如下。
```
{

  "pages": ["pages/index/index"]

}
```
在根目录下新建pages目录，然后在pages目录下新建index目录，接着在index目录下创建两个文件index.wxml和index.js。

index.wxml的内容如下所示。<text>Hello World</text>

index.js的内容如下所示。Page({})

# 小程序代码组成
app.json文件在小程序代码中扮演静态配置的作用，在小程序运行之前就决定了小程序一些表现，需要注意的是小程序是无法在运行过程中去动态更新JSON 配置文件从而发生对应的变化的。

WXML 全称是 WeiXin Markup Language，是小程序框架设计的一套标签语言，结合小程序的基础组件、事件系统，可以构建出页面的结构。
工具非常智能在app.json 文件定义文件会自动生成


​一个完整的 WXML语句由一段开始标签和一段结束标签组成，在标签中可以是内容，也可以是其他的 WXML 语句，这一点上同 HTML 是一致的。有所不同的是，WXML 要求标签必须是严格闭合的，没有闭合将会导致编译错误。

在小程序中，使用 WXML 语言所提供的数据绑定功能，
于wxml添加
`<text>当前时间：{{time}}</text>`
在Page的data键赋值为  
```
data: {
    time: (new Date()).toString()
  }
```
保存，模拟器刷新后正确的展示了当前时间，并且每次编译时间都会被更新。

WXML 通过 {{变量名}} 来绑定 WXML 文件和对应的 JavaScript 文件中的 data 对象属性。

属性值也可以动态的去改变，有所不同的是，属性值必须被包裹在双引号中，如下：
<text data-test="{{test}}"> hello world</text>

还可以在 {{ }} 内进行简单的逻辑运算。

三元运算：
`<text>{{ a === 10? "变量 a 等于10": "变量 a 不等于10"}}</text>`
算数运算：
字符串的拼接
