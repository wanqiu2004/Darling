使用不同的技术栈构建桌面应用，应用的核心部分使用 Rust 编写，而界面部分是通过 Webview 渲染 HTML。

应用通过一个可选的 JS API 和 Rust API 进行消息传递，允许控制操作系统。支持托盘界面

直接使用 WRY 和 TAO 进行操作系统的系统调用。







各个核心组成部分和其相关的库（crates）

tauri-runtime：是 Tauri 和底层 Webview 库之间的“胶水层”（glue layer）。它提供了 Tauri 与 Webview 之间的连接和交互。

tauri-macros： 提供了多个宏，用于生成 Tauri 应用中的上下文（context）、处理器（handler）和命令（commands）。利用 tauri-codegen crate 来生成这些代码，简化了开发过程。

tauri-utils：这个 crate 提供了常见的工具和实用函数，用于代码的复用解析配置文件。检测平台三元组（平台标识）。注入 CSP（内容安全策略）。管理静态资源（如图标、资产文件等）。



tauri-build：作用：在构建时应用宏，完成一些特殊功能的配置（如与 Cargo 相关的功能）。处理与构建过程相关的配置和脚本，确保在构建时正确地生成 Tauri 应用所需的内容。

tauri-codegen：作用：它处理静态资源的嵌入、哈希和压缩（例如应用图标和系统托盘图标），并且在编译时解析 tauri.conf.json 配置文件，生成 Config 结构体。

tauri-runtime-wry：作用：这个 crate 主要负责与 WRY（一个底层的 Webview 库）交互，提供系统级的操作功能，像是打印、显示器检测、窗口管理等。



上游 Crates
TAO跨平台的应用窗口创建库，使用 Rust 编写
WRY 是一个跨平台的 WebView 渲染库，使用 Rust 编写Tauri 使用 WRY 作为抽象层，负责确定使用的 Webview 类型以及如何进行交互









Tauri 工具链

API（JavaScript / TypeScript）
这是一个 TypeScript 库，它为你创建了 CommonJS（cjs）和 ES 模块（esm）的 JavaScript 接口，供你导入到前端框架中，以便应用可以调用并监听后端活动。该库以纯 TypeScript 形式提供，因为某些框架使用这种形式更为高效。它利用 Webview 与主机之间的消息传递机制进行交互。


打包器（Bundler）（Rust / Shell）
根据检测到的平台或指定的平台构建应用。目前支持 macOS、Windows 和 Linux

cli.rs（Rust）
简介：这是一个 Rust 可执行文件，提供了 CLI 所需的全部功能接口，支持在 macOS、Windows 和 Linux 上运行。

cli.js（JavaScript）
简介：这是一个围绕 cli.rs 的封装


create-tauri-app（JavaScript）
简介：这是一个工具包，可以帮助开发团队快速创建一个新的 Tauri 应用项目，支持使用任何已配置的前端框架来搭建。















Tauri 采用了类似于 Electron 或许多现代 web 浏览器的多进程架构。
早期，通常使用单个进程来执行计算、绘制界面并响应用户输入。这意味着如果有一个长时间运行、资源消耗大的计算，它会导致用户界面变得无响应；或者更糟糕的是，一个应用组件的失败可能会导致整个应用崩溃。

更好地利用了现代多核 CPU，并使得应用程序更加安全。因为不同的组件被隔离在不同的进程中


每个 Tauri 应用都有一个核心进程，作为应用的入口点，并且是唯一拥有操作系统完全访问权限的组件。
主要责任是利用操作系统的完全访问权限来创建和管理应用窗口、系统托盘菜单或通知
负责处理所有的进程间通信（IPC）。所有的消息传递都通过核心进程进行，这使得你可以在一个中央位置拦截、过滤和操作 IPC 消息。
核心进程并不直接渲染用户界面（UI）；它启动 WebView 进程，利用操作系统提供的 WebView 库来渲染界面。

Tauri 使用一种特定的进程间通信（IPC）方式，称为 异步消息传递
事件是一个由 Tauri 核心进程和 WebView 进程之间传递的消息。它允许后台进程向前端界面发送信息，例如通知用户、更新状态等。事件通常是单向的，即发送方发送消息而不期望获得响应。
命令 (Commands)
命令是双向通信的基础，允许前端（WebView）向后台（Tauri 核心进程）发送请求，并获得响应。命令是 WebView 和核心进程之间交互的主要方式，支持同步和异步操作。


事件是一次性、单向的 IPC 消息，最适合用于传递生命周期事件和状态变化。与命令不同，事件可以由前端（Frontend）和 Tauri 核心（Tauri Core）双方发出。
Tauri 还提供了一种抽象层，建立在 IPC 消息之上。主要的 API —— invoke，类似于浏览器的 fetch API，允许前端调用 Rust 函数、传递参数并接收数据。所有的参数和返回数据必须能够序列化为 JSON。



Brownfield 模式是最简单、最直接的模式，因为它尽可能兼容现有的前端项目。
Isolation 模式










已经有一个现有的前端，或者更喜欢自己设置，你可以使用 Tauri CLI 单独初始化项目的后端。
yarn add -D @tauri-apps/cli@latest
确定你的前端开发服务器的 URL。这是 Tauri 用来加载内容的 URL。

在你的项目目录中，初始化 Tauri：
yarn tauri init
✔ 应用名称是什么？ tauri-app
✔ 窗口标题应该是什么？ tauri-app
✔ 你的 Web 资源在哪里？ ..
✔ 你的开发服务器的 URL 是什么？ http://localhost:5173
✔ 你的前端开发命令是什么？ pnpm run dev
✔ 你的前端构建命令是什么？ pnpm run build

通过运行开发服务器来验证：
yarn tauri dev



网页视图实时反映更改类似，Tauri 会监视您的 Rust 文件的更改，因此当您修改它们时，您的应用程序会自动重建并重新启动。
在使用 Git 管理您的 Tauri 项目时，有一些关于要提交哪些文件的重要实践：
提交 Cargo.lock 和 Cargo.toml： 您 应该 将 src-tauri/Cargo.lock 文件与 src-tauri/Cargo.toml 一同提交。这样可以确保所有开发人员使用相同的依赖版本，从而提供一致的、可确定的构建。
不要提交 target 文件夹












分发
Tauri 提供了您所需的工具，您可以通过这些工具将您的应用分发到平台或通过平台特定的安装程序进行分发。
yarn tauri build
构建（不捆绑）
yarn tauri build --no-bundle



您可以在 tauri.conf.json 文件中的 version 配置选项中定义应用的版本，这是管理应用版本的推荐方式。如果未设置该配置项，Tauri 会使用 src-tauri/Cargo.toml 文件中的 package > version 值作为版本号。



Tauri 应用程序在 Windows 上的分发方式有两种：一种是使用 WiX Toolset v3 生成的 Microsoft 安装程序（.msi 文件），另一种是使用 NSIS 生成的安装执行文件（-setup.exe 文件）。












如果你使用了某种 UI 框架（比如 React、Vue、Svelte 等）或者 JavaScript 打包工具（比如 Webpack、Vite 等），这些工具通常会提供一个开发服务器来帮助加速开发过程。开发服务器能够实时更新你的应用，减少每次修改后手动重新加载的时间。

可以通过 Tauri 配置文件 tauri.conf.json 中的 devUrl 和 beforeDevCommand 配置项来进行设置。
{
  "build": {
    "devUrl": "http://localhost:3000",
    "beforeDevCommand": "npm run dev"
  }
}




可以直接告诉 Tauri 指向你的前端源代码，Tauri CLI 会为你启动一个开发服务器。

示例配置如下：

tauri.conf.json
{
  "build": {
    "frontendDist": "./src"
  }
}











