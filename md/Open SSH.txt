openssl genpkey -algorithm RSA -out private_key.pem
openssl req -new -key private_key.pem -out server.csr
openssl x509 -req -in server.csr -signkey private_key.pem -out server.crt -days 365
openssl x509 -in server.crt -text -noout



OpenSSH 是 SSH2 协议 的一个实现。

SSH2 的结构 分为三个层次：
传输层 transport layer：负责密钥交换、算法协商和加密保护，确保数据的完整性和机密性。
用户身份验证层 user authentication layer：在已建立的安全连接上进行用户认证，支持多种身份验证方式（如密码认证、公钥认证等）。
连接层 connection layer：在已认证的连接上复用多个并发的通道，并提供登录会话的隧道功能和 TCP 转发。

OpenSSH 做了一些增强和扩展，提供了一些额外的功能，
提供了 SFTP 文件传输协议，支持文件的安全传输。
提供了新的 Diffie-Hellman 群组交换，增强了密钥交换的安全性。
TCP 转发 X11 转发
基于 SSH 的虚拟专用网络SSH 支持使用 tun(4) 网络伪设备进行虚拟专用网络（VPN）隧道，使两个网络可以安全地连接。
充当 SOCKS 代理服务器。
端口转发   隧道和虚拟网络接口

RSA DSA ECDSA Ed25519


ssh(1) — 基本的类似 rlogin/rsh 的客户端程序
sshd(8) — 允许登录的守护进程
ssh_config(5) — 客户端配置文件
sshd_config(5) — 守护进程配置文件

sftp(1) — 类似 FTP 的程序，通过 SSH1 和 SSH2 协议工作
scp(1) — 文件复制程序，类似 rcp
ssh-keygen(1) — 密钥生成工具
sftp-server(8) — SFTP 服务器子系统（由 sshd 自动启动）
ssh-keyscan(1) — 从多个主机收集公钥的工具
ssh-keysign(8) — 用于基于主机的身份验证的辅助程序


        ssh [选项] destination [command]    旨在提供在不安全网络上两个不可信主机之间的安全加密通信。X11 连接、任意 TCP 端口和 UNIX 域套接字也可以通过安全通道转发。
        如果指定了命令，它将在远程主机上执行，而不是登录到 shell。 
        ssh -Q query_option：查询特定的信息
        -Q query_option 是 ssh 和相关命令（如 ssh-keygen）的一个选项，用于查询支持的加密算法、协议和其他相关特性。ssh -Q help

        SSH 客户端支持 SSH 协议 2。
        基于 GSSAPI 的认证、基于主机的认证、公共密钥认证、键盘交互式认证和密码认证。
        第一次连接到服务器时，ssh客户端工具会向你展示服务器公钥的指纹（除非你禁用 你可以使用 ssh-keygen 工具查看指纹：ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
        支持通过 "随机艺术" 来直观地比较主机密钥。
        当使用 ssh 连接时，它通常会设置环境变量：
        在使用 SSH 时，有许多重要的配置和认证文件。以下是对一些关键文件的描述，
        //  ~/.rhosts用于基于主机的身份验证 (Host-based Authentication)。它列出了允许访问该主机的主机名。
        //  /etc/hosts.equiv用于基于主机的身份验证。
        ssh 命令退出时会返回远程命令的退出状态，若发生错误，则返回 255。



        ~/.ssh/默认存放用户配置和认证信息的目录。这里包含 SSH 公钥、私钥、已知主机密钥等文件。虽然没有要求整个目录保密，但建议目录的权限是用户可读、可写、可执行，其他人不可访问。
        ~/.ssh/authorized_keys列出可以用来登录用户账户的公钥。该文件中列出的公钥可以是 ECDSA、Ed25519、RSA 等类型的密钥。要有严格的权限控制（通常为 600）
        ~/.ssh/config用户级别的 SSH 配置文件，用于指定 SSH 客户端连接时的行为。文件格式和配置选项在 ssh_config(5) 中有详细说明。
        ~/.ssh/environment
        ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519, ~/.ssh/id_rsa用户的私钥文件，用于身份验证。这些文件包含敏感数据，必须对用户可读、可写、可执行，但不能对其他人可访问。
        ~/.ssh/id_ecdsa.pub, ~/.ssh/id_ed25519.pub, ~/.ssh/id_rsa.pub用户的公钥文件，用于身份验证。这些文件不是敏感信息，可以（但不强制）对所有人可读。
        ~/.ssh/known_hosts存储用户已经登录过的主机的公钥。它列出了所有已经连接的主机密钥，且这些主机密钥尚未存在于系统范围的已知主机列表中。
        ~/.ssh/rc登录时由 SSH 执行的命令文件，命令会在用户的 shell 或命令启动之前执行。可以用于执行一些定制操作。

        /etc/ssh/ssh_config系统范围的 SSH 配置文件，定义了 SSH 客户端的全局行为。
        /etc/ssh/ssh_known_hosts存储系统范围内已知的所有主机密钥。系统管理员应为组织中的所有机器准备这个文件，它应该是所有人可读的。
        /etc/ssh/sshrc















        sshd 可以通过命令行选项或配置文件进行配置（默认是 sshd_config 配置文件）；命令行选项优先于配置文件中指定的值。为每个传入的连接派生一个新的守护进程。

        sshd也定义了一些ssh配置文件的格式

        当客户端连接时，sshd 会响应其公钥。客户端将此公钥与其本地存储的数据库进行比较，以验证该公钥是否发生了变化。
        前向保密通过 Diffie-Hellman 密钥交换协议（DH）提供。该协议生成一个共享的会话密钥。会话的其余部分会使用对称加密算法进行加密。
        客户端从服务器提供的加密算法中选择一种算法进行加密。此外，整个会话的完整性通过加密消息认证码（MAC）来保障。

        然后，服务器和客户端进入认证对话。客户端尝试使用以下几种方式进行身份验证：

        基于主机的认证（Host-based authentication）
        公钥认证（Public key authentication）
        挑战-响应认证（Challenge-response authentication）
        密码认证（Password authentication）

        如果客户端成功认证，双方将进入会话准备对话阶段。在此阶段，客户端可以请求以下功能：
        分配伪终端（pseudo-tty）
        转发 X11 连接
        转发 TCP 连接
        转发认证代理连接


        当用户成功登录时，sshd 执行以下操作：

        如果是通过终端（tty）登录，且没有指定命令：

        打印最后登录时间和 /etc/motd 文件的内容（除非在配置文件中或通过 ~/.hushlogin 被禁止，参见“FILES”部分）。
        如果是通过终端（tty）登录：

        记录登录时间。
        检查 /etc/nologin 文件：

        如果存在，打印其内容并退出登录（root 用户除外）。
        以普通用户权限运行：

        切换为普通用户权限。
        设置基本环境：

        设置用户环境变量。
        读取 ~/.ssh/environment 文件（如果存在），并且如果允许用户修改环境：

        读取并应用其中的环境设置。具体规则可参见 sshd_config(5) 中的 PermitUserEnvironment 选项。
        切换到用户的家目录：

        更改当前工作目录为用户的家目录。
        如果 ~/.ssh/rc 文件存在，且 sshd_config(5) 中的 PermitUserRC 选项已设置：

        执行该文件；如果 ~/.ssh/rc 不存在，则执行 /etc/ssh/sshrc 文件；如果 /etc/ssh/sshrc 也不存在，则运行 xauth(1)。
        执行用户的 shell 或命令：

        所有命令都将在用户登录 shell 中运行，该 shell 在系统密码数据库中指定。


        AUTHORIZED_KEYS 文件格式
        公钥由以下几个用空格分隔的字段组成：选项、密钥类型、Base64 编码的密钥、注释。选项字段是可选的。支持的密钥类型包括：

        sk-ecdsa-sha2-nistp256@openssh.com
        ecdsa-sha2-nistp256
        ecdsa-sha2-nistp384
        ecdsa-sha2-nistp521
        sk-ssh-ed25519@openssh.com
        ssh-ed25519
        ssh-rsa
        注释字段没有实际用途（但可以方便用户标识密钥）。
        
        请注意，此文件中的行可以非常长（因为公钥编码的大小），最长可达 8KB，这允许使用最大为 16 千比特的 RSA 密钥。你不需要手动输入这些密钥，而是应该复制 id_ecdsa.pub、id_ecdsa_sk.pub、id_ed25519.pub、id_ed25519_sk.pub 或 id_rsa.pub 文件并编辑它。
        
        sshd 强制要求 RSA 密钥模数大小最小为 1024 位。


        选项（如果存在）由用逗号分隔的选项说明组成。除非在双引号内，否则不允许有空格。以下是支持的选项说明（请注意，选项关键字不区分大小写）：

        agent-forwarding
        启用先前通过 restrict 选项禁用的认证代理转发。

        cert-authority
        指定列出的密钥是一个认证机构（CA），被信任用于验证用户认证的签名证书。证书可以编码类似于这些密钥选项的访问限制。如果同时存在证书限制和密钥选项，将应用最严格的联合限制。

        command="command"
        指定当此密钥用于认证时，始终执行的命令。用户提供的命令（如果有）会被忽略。该命令会在请求分配伪终端（PTY）时通过 PTY 执行；如果未请求终端，则在没有 TTY 的情况下执行。如果需要 8 位清晰通道，则不能请求分配 PTY，或应指定 no-pty。命令中可以通过反斜杠引用引号。

        这个选项对于限制某些公钥执行特定操作可能会非常有用。例如，可以限制某个密钥仅允许进行远程备份操作，而禁止其他操作。

        最初由客户端提供的命令可以通过 SSH_ORIGINAL_COMMAND 环境变量访问。请注意，此选项适用于 shell、命令或子系统的执行。还应注意，此命令可能会被 sshd_config(5) 中的 ForceCommand 指令覆盖。

        如果指定了命令并且用于认证的证书中嵌入了强制命令，则仅当两个命令完全一致时，证书才会被接受。

        environment="NAME=value"
        指定使用此密钥登录时要添加到环境中的字符串。以这种方式设置的环境变量将覆盖其他默认环境值。允许多个此类选项。环境处理默认禁用，并通过 PermitUserEnvironment 选项进行控制。

        expiry-time="timespec"
        指定密钥在此时间后不再被接受。时间可以指定为 YYYYMMDD[Z] 日期或 YYYYMMDDHHMM[SS][Z] 时间。日期和时间将在系统时区内解析，除非后缀为 Z 字符，则会在 UTC 时区内解析。

        from="pattern-list"
        除了公钥认证外，还必须在逗号分隔的模式列表中包含远程主机的规范名称或其 IP 地址。更多关于模式的信息，请参见 ssh_config(5) 中的 PATTERNS。

        除了可以应用于主机名或地址的通配符匹配，from 块还可以使用 CIDR 地址/掩码长度表示法来匹配 IP 地址。

        这个选项的目的是可选地提高安全性：仅依靠公钥认证并不信任网络或名称服务器或其他任何东西（只有密钥）；然而，如果某人以某种方式窃取了密钥，密钥将允许入侵者从世界任何地方登录。这个附加选项使得使用被窃取的密钥变得更加困难（除了密钥，名称服务器和/或路由器也必须被攻破）。

        no-agent-forwarding
        禁止在此密钥用于认证时进行认证代理转发。

        no-port-forwarding
        禁止在此密钥用于认证时进行 TCP 转发。客户端的任何端口转发请求都会返回错误。此选项可与 command 选项一起使用。

        no-pty
        防止分配伪终端（请求分配 PTY 会失败）。

        no-user-rc
        禁用执行 ~/.ssh/rc。

        no-X11-forwarding
        禁止在此密钥用于认证时进行 X11 转发。客户端的任何 X11 转发请求都会返回错误。

        permitlisten="[host:]port"
        限制使用 ssh(1) -R 选项的远程端口转发，使其仅监听指定的主机（可选）和端口。

        permitopen="host:port"
        限制使用 ssh(1) -L 选项的本地端口转发，使其仅连接到指定的主机和端口。

        port-forwarding
        启用先前通过 restrict 选项禁用的端口转发。

        principals="principals"
        在 cert-authority 行上，指定证书认证的允许主体，作为逗号分隔的列表。列表中的至少一个名称必须出现在证书的主体列表中，证书才能被接受。

        pty
        允许先前通过 restrict 选项禁用的 PTY 分配。

        no-touch-required
        对于使用此密钥进行的签名，不要求演示用户的存在。此选项仅对 FIDO 认证算法 ecdsa-sk 和 ed25519-sk 有意义。

        verify-required
        要求使用此密钥进行的签名证明已验证用户，例如通过 PIN 或生物识别。此选项仅对 FIDO 认证算法 ecdsa-sk 和 ed25519-sk 有意义。

        restrict
        启用所有限制，即禁用端口、代理和 X11 转发，禁用 PTY 分配以及禁用执行 ~/.ssh/rc。如果将来对 authorized_keys 文件添加了更多限制功能，它们也将包含在此集限制内。

        tunnel="n"
        强制在服务器上使用 tun(4) 设备。如果客户端请求隧道，则将使用下一个可用设备。

        user-rc
        启用先前通过 restrict 选项禁用的 ~/.ssh/rc 执行。

        X11-forwarding
        允许先前通过 restrict 选项禁用的 X11 转发。



SSH_KNOWN_HOSTS 文件格式
/etc/ssh/ssh_known_hosts 和 ~/.ssh/known_hosts 文件包含所有已知主机的公钥。这些文件的格式包含几个字段，用于标识和验证主机的公钥。以下是该文件格式的详细说明：

1. 文件结构
每一行包含以下字段（空格分隔）：

标记（Marker， 可选）
主机名（Hostnames）
密钥类型（Keytype）
Base64 编码的密钥（Base64-encoded key）
注释（Comment，可选）
2. 标记（Marker）
标记是可选的，但如果出现，则必须是以下之一：

@cert-authority：表示这一行包含认证机构（CA）的密钥，用于信任由该机构签发的主机密钥。
@revoked：表示这一行的密钥已被撤销，不应接受该密钥用于认证。
每行只能有一个标记。

3. 主机名（Hostnames）
主机名是一个逗号分隔的模式列表（可以使用通配符 * 和 ?）。每个模式将与主机名进行匹配：

通配符（* 和 ?）：可以用作通配符来匹配任意字符。
否定模式（!）：如果主机名与否定模式匹配，则该行的密钥不被接受，尽管它可能与其他模式匹配。
主机名模式可以包括非标准端口号，如 hostname:port，也可以使用哈希形式表示主机名以隐藏其内容。哈希主机名以 | 字符开头，后跟哈希值。

4. 密钥类型和 Base64 编码的密钥（Keytype and Base64-encoded key）
密钥类型（如 ssh-rsa、ssh-ed25519）和 Base64 编码的公钥直接来自主机密钥。可以通过例如 /etc/ssh/ssh_host_rsa_key.pub 来获取这些密钥。

5. 注释（Comment）
注释字段从密钥部分开始，直到行尾，且它不用于验证，仅用于说明目的。注释是可选的。

6. 特殊情况
# 行和空行：以 # 开头的行以及空行会被忽略，它们通常用于注释。
多个主机密钥：可以为同一个主机名添加多行密钥信息，特别是在不同的域名或主机名格式下。
7. 标记和撤销
撤销密钥（@revoked）：当已知私钥被盗用或不再可信时，可以在公钥行前加上 @revoked 标记来标记该密钥为撤销状态。这些密钥在认证过程中将被拒绝，并且会生成警告。
8. 示例
bash
复制代码
# 这是一个普通的公钥行，主机名可以是多个名称或IP地址
cvs.example.net,192.0.2.10 ssh-rsa AAAA1234.....=

# 这是一个哈希过的主机名
|1|JfKTdBh7rNbXkVAQCRp4OQoPfmI=|USECr3SWf1JUPsms5AqfD5QfxkM= ssh-rsa AAAA1234.....=

# 这是一个已撤销的密钥
@revoked * ssh-rsa AAAAB5W...

# 这是一个认证机构的密钥，接受 *.mydomain.com 和 *.mydomain.org 下的所有主机
@cert-authority *.mydomain.org,*.mydomain.com ssh-rsa AAAAB5W...
9. 说明
@cert-authority：该标记用于指定一个公钥是认证机构（CA）密钥，所有由该认证机构签发的证书都可以信任。
@revoked：标记密钥为撤销状态，即使该密钥被匹配也不会被接受，通常用于已知密钥被盗或不再有效的情况。
哈希主机名：使用 | 字符开头的哈希主机名用于保护文件内容隐私，避免泄露具体的主机名或IP地址。


/etc/nologin
用途：如果此文件存在，sshd 会拒绝除 root 外的所有登录请求。该文件的内容会显示给尝试登录的用户，非 root 用户将被拒绝连接。
安全要求：该文件应是世界可读的。







ssh-keygen 用于生成、管理和转换 SSH 身份验证密钥。

通过 -t 选项可以指定要生成的密钥类型。如果没有任何参数调用，ssh-keygen 将生成一个 Ed25519 密钥。

ssh-keygen 还用于生成用于 Diffie-Hellman 密钥交换（DH-GEX）的组

运行一次 ssh-keygen 来创建认证密钥，存储在 ~/.ssh/id_ecdsa、~/.ssh/id_ecdsa_sk、~/.ssh/id_ed25519、~/.ssh/id_ed25519_sk 或 ~/.ssh/id_rsa 文件中。
ssh-keygen 会生成密钥并询问保存私钥的文件名。公钥会保存为相同名称的文件，但文件名后会加上 .pub 后缀。该程序还会询问一个密码短语。
密码短语可以为空，表示没有密码（主机密钥必须没有密码），也可以是任意长度的字符串。密码短语类似于密码，
但它可以是一个包含多个单词、标点符号、数字、空格或任何字符的短语。好的密码短语通常长 10-30 个字符，
-p 选项用于 更改现有私钥的密码短语

-b bits
指定要生成的密钥的位数。对于 RSA 密钥，最小大小为 1024 位，默认是 3072 位。一般认为 3072 位足够了。
对于 ECDSA 密钥，-b 标志通过选择三种椭圆曲线尺寸之一（256、384 或 521 位）来确定密钥长度。
尝试使用这些三种以外的位长度会失败。ECDSA-SK、Ed25519 和 Ed25519-SK 密钥有固定长度，-b 标志会被忽略。

-C comment
提供一个新的注释。

-c
请求更改私钥和公钥文件中的注释。程序将提示输入包含私钥的文件、如果密钥有密码则输入密码，以及新注释。

-E fingerprint_hash
指定显示密钥指纹时使用的哈希算法。有效选项为：“md5”和“sha256”。默认值是“sha256”。

-f filename
指定密钥文件的文件名。

-H
哈希 known_hosts 文件。将指定文件中的所有主机名和地址替换为哈希表示；原始内容会移动到以 .old 结尾的文件中。
这些哈希值仍然可以被 ssh 和 sshd 正常使用，但如果文件内容被泄露，则不会揭示身份信息。
此选项不会修改已存在的哈希主机名，因此在包含哈希和非哈希名称的文件中使用是安全的。

-l
显示指定公钥文件的指纹。ssh-keygen 会尝试找到匹配的公钥文件并打印其指纹。如果与 -v 一起使用，则会提供密钥的 ASCII 艺术表示。


-F hostname | [hostname]:port
在 known_hosts 文件中搜索指定的主机名（可选端口号），列出找到的所有实例。此选项用于查找已哈希的主机名或地址，也可以与 -H 选项结合使用，以哈希格式打印找到的密钥。

-l
此选项用于显示指定公钥文件的指纹。ssh-keygen 会尝试找到指定公钥文件，并显示其指纹。指纹是一种通过哈希算法生成的简短的、唯一的标识符，用来验证公钥的身份。
通常，指纹以十六进制形式显示，并且可以帮助你在没有查看整个公钥的情况下，快速确认公钥的真实性
与 -v 一起使用，则会提供密钥的 ASCII 艺术表示。

-O option：提供额外的选项，适用于密钥操作（如签名证书或密钥吊销）。

-t key_type：指定要生成的密钥类型（如 ecdsa、ed25519、rsa 等）。
-V validity_interval：定义证书的有效期，适用于签名密钥时。
-v：启用详细模式，用于调试。
-Y sign：使用 SSH 密钥对文件或数据进行签名。
-Y verify：验证由 SSH 密钥签名的文件或数据的签名。

-P passphrase：输入 旧密码，用于需要验证旧密码的操作（如修改密码）。
-p：交互式地输入旧密码并设置新密码，适用于手动更改密码的情况。
-N new_passphrase：直接指定 新密码，无需输入旧密码，通常用于脚本或自动化任务中。

ssh-keygen 支持签署密钥以生成可用于用户或主机身份验证的证书。